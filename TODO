0.1.0:

* EASY		remove utils, split up gstutils

* EASY:		doublecheck spec

* EASY:		write .pc and -uninstalled.pc

* EASY:		have a FLU_MODULES env var to scan for other flu module .xml

* EASY:		fix all code files to have the new header

* MEDIUM:	write startup "flumotion" script

* MEDIUM	give useful error messages when there is no network !
		(service network stop and start flumotion and see hang)

LATER:

* EASY		move muxers in their own dir ?

* MEDIUM:	provide login dialog in flumotion-admin, with user/pass or
		other types,
		and sessions saved

* MEDIUM:	component.component overrides .error and calls reactor.stop(),
	  	this is dangerous, figure that out

* MEDIUM:	make all factories reconnecting and test

* MEDIUM:	add import hooks so that when there is a.b in one pythonpathdir
	        and a.c in another, programs can import both a.b and a.c

* EASY:		make relative attribute work on filename properties in xml
	        so that they are relative to a given var from configure;
		might need to make a type "path" for that in registry code ?

* MEDIUM	allow expression of "test component depends on streamer component"

* MEDIUM	implement moods of component:
		- angry: error
		- happy: running
		- hungry/bored: waiting for feeds to start

* EASY:		change rawstring regentry type to string, and make pipelinestring for pipelines which need \n translated to space
* EASY		and force update every minute,
		or when stats are different from last,
	 	in http streamer UI

* MEDIUM	create a common.heaven.Heaven base class, and subclass others
	        involves making admin use same system for managing avatars

* MEDIUM	integration with monitoring tools:
		big brother: either:

* HARD		transfer ALL code from manager

* EASY		add simple api to add files to bundler from current tree/dir

* EASY		decide if bouncer's base authenticate method should always
		be overridden and thus raise
- API cleanup:

- manager/component.py:
  - create/remove Avatar -> summon/expel
  - work on only name or only component, so there is a clear API distinction
  - name all arguments used in functions that are the same, with the same name
  - rename components to avatars, and rename functions accordingly

- make an executable script/program that makes all required checks and
  outputs a report, has a proper zero or non-zero exit status and 
  can't run forever if things are stuck (times out properly)


http component

- multiple sources
- rate limit
- make an http URL return a 2xx code when it works or a 5xx code
  when it doesn't
- check for StringIO requests instances, which Twisted 1.3.0 implements
