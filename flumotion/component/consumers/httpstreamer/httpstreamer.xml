<registry>
  <components>
    <component type="http-streamer"
               base="flumotion/component/consumers/httpstreamer"
               _description="A consumer that streams over HTTP.">
<!-- old way of specifying component source -->
      <source location="flumotion.component.consumers.httpstreamer.httpstreamer" />

      <eater name="default" />

      <!-- entry points for distributable code bundles -->
      <entries>
        <entry type="component" location="httpstreamer.py"
               function="MultifdSinkStreamer" />
        <entry type="admin/gtk" location="admin_gtk.py"
               function="GUIClass" />
      </entries>

      <sockets>
        <socket type="flumotion.component.plugs.loggers.RequestLoggerPlug" />
        <socket type="flumotion.component.plugs.base.ComponentPlug" />
        <socket type="flumotion.component.plugs.streamdata.StreamDataProviderPlug" />
        <socket type="flumotion.component.plugs.rrd.RRDPlug" />
        <socket type="flumotion.component.bouncers.plug.BouncerPlug" />
      </sockets>

      <properties>
        <!-- FIXME, authenticating against remote bouncers should happen through
             a plug, not this property -->
        <property name="bouncer" type="string"
                  _description="The name of a bouncer in the atmosphere to authenticate against." />
        <property name="issuer-class" type="string"
                  _description="The Python class of the Keycard issuer to use." />
        <property name="mount-point" type="string"
          _description="The mount point on which the stream can be accessed." />

        <property name="type" type="string"
                  _description="'master' to listen on a port, or 'slave' to slave to a porter (default master)." />

        <!-- If type is 'master' (default) -->
        <property name="port" type="int"
                  _description="The port to listen on (if type is 'master')." />

        <!-- If type is 'slave' -->
        <property name="porter-socket-path" type="string"
                  _description="The path to the socket to communicate with the porter." />
        <property name="porter-username" type="string"
                  _description="The username to authenticate to the porter." />
        <property name="porter-password" type="string"
                  _description="The password to authenticate to the porter." />

        <!-- Hostname currently for display purposes -->
        <property name="hostname" type="string"
                  _description="The server's host name to display." />
        <property name="domain" type="string"
                  _description="The domain of the server for authentication." />

        <property name="client-limit" type="int"
                  _description="The maximum number of clients allowed." />
        <property name="bandwidth-limit" type="int"
                  _description="The maximum bandwidth usage allowed in bits per second." />
        <property name="redirect-on-overflow" type="string"
                  _description="A URL to redirect clients to if either of the limits have been reached." />

        <property name="duration" type="float"
                  _description="How long to keep clients connected (in seconds)."/>
        <property name="description" type="string"
                  _description="A description of the stream."/>

        <!-- IP-based filtering for logs; commonly used to filter out
             automated-tester IPs from the logs. Values should be of the form
             network-address/prefix-length, e.g. "192.168.1.0/24" -->
        <property name="ip-filter" type="string" multiple="yes"
                  _description="The IP network-address/prefix-length to filter out of logs." />

        <!-- Burst on connect options. Defaults to off.
             If just burst-on-connect is specified, this gives a simple
             burst-from-latest keyframe (so no effect for audio streams).

             Additionally, you MAY specify either (not both) of burst-size,
             burst-time. burst-size gives a minimum target burst in kB (it can
             be larger to start from a keyframe).
             burst-time gives a target burst time in seconds (but requires
             gst-plugins-base 0.10.11 or later).
          -->
        <property name="burst-on-connect" type="bool"
                  _description="Whether to burst old data on client connection (reduces buffering time)." />
        <property name="burst-size" type="int"
                  _description="How much data to burst (in KB)." />
        <property name="burst-time" type="float"
                  _description="How much data to burst (in seconds)." />
      </properties>
    </component>
  </components>

  <bundles>

    <bundle name="httpstreamer-base">
        <dependencies>
            <dependency name="component-base" />
        </dependencies>

        <directories>
            <directory name="flumotion/component/consumers/httpstreamer">
                <filename location="__init__.py" />
            </directory>
        </directories>
    </bundle>

    <bundle name="httpstreamer-admin-gtk">
      <dependencies>
        <dependency name="httpstreamer-base" />
        <dependency name="base-admin-gtk" />
      </dependencies>

      <directories>
        <directory name="flumotion/component/consumers/httpstreamer">
          <filename location="httpstreamer.glade" />
          <filename location="admin_gtk.py" />
        </directory>
      </directories>
    </bundle>

    <bundle name="httpstreamer-component">
        <dependencies>
            <dependency name="component" />
            <dependency name="httpstreamer-base" />
            <dependency name="base-component-http" />
            <dependency name="porterclient" />
        </dependencies>

        <directories>
            <directory name="flumotion/component/consumers/httpstreamer">
                <filename location="httpstreamer.py" />
                <filename location="resources.py" />
            </directory>
        </directories>
    </bundle>

  </bundles>
</registry>
