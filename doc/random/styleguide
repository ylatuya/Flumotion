FLUMOTION STYLE GUIDE
---------------------

UI
--

- use kbit/s and Mbit/s
- provide accelerators for controls

API DOCS
--------
- We use epydoc and epydoc markup for API docs (see http://epydoc.sf.net/)

- all public methods should be documented, along with parameters and
  return values
  @param, @type, @returns, @rtype
- public instance vars should be documented
  @ivar, @type
- list @param before @type: what it actually does is more useful to know
  than the type
- align the var/param name:
  @param name:
  @type  name:
- align the content after the colons within a block
- types are "str" and "bool", not string or boolean
- separate @param from @rtype/@returns with an empty line
- .callRemote calls and similar are interfaces between processes.
  They should be documented with care, and it is good to add explain
  how they get received on the other side, linking to the receiving object
  base class
- defer_generator_method screws up the docs for public methods, leaving them
  without a docstring.  Avoid using defer_generator_method in public methods.
- defer_generator_method screws up the docs for private methods, causing
  private methods to be listed in the public API.  Avoid using
  defer_generator_method in private methods.

COMPONENTS
----------
- component types should always be lowercase, and consist of two
  dash-separated words.
  (FIXME: is there a need to have more than one word for the first part ?
   The last part should always be one word though)
  The first part should describe what medium or type it handles
  within the class, and distinguish from others within that class.
  e.g. firewire-producer, webcam-producer, tvcard-producer, loop-producer,
       ...
  The second part should be the class of component:
  producer, converter, consumer, muxer, encoder, bouncer, ...
- property names should always be lowercase and dash-separated.
  example: burst-on-connect, buffer-size, buffer-time
- property entries should have a full sentence describing them so
  flumotion-inspect can display this information
- directory layout:
  - components always go under flumotion/component
  - underneath that, they should go in a subdirectory according to class,
    or misc/
  - under that, they can go in files matching the first part of the type,
    or in a separate subdirectory for the component on its own
