Bundles
=======

The code from the wizard should move to their respective components, 
and should be sent as bundles from the manager to the administration interface. 
The components itself will, through the main wizard object have a reference
to the administration medium and using that it can easily call remote methods, 
the main (only?) usage will be running code on a connected worker.

I'd suggest that a bundle is specified in the xml file, for instance:
<registry>
  <components>
    <component name="video-test">
<!-- maybe function is not needed, and we keep createComponent -->
      <entry location="flumotion.component.producers.videotest.videotest"
             function="..." />
     ...
    </component>
  </components>
  <bundles>
    <bundle name="component-videotest">
      <dependency name="component"/>
      <directory name="flumotion/components/producers/videotest">
        <filename location="videotest.py"/>
      </directory>
    </bundle>
    <bundle name="glade-videotest">
      <directory name="flumotion/components/producers/videotest">
        <filename location="gtk/videotest.glade/>
      </directory>
    </bundle>
    <bundle name="admin-gtk-videotest">
      <dependency name="base"/>
      <dependency name="glade-videotest"/>
      <directory name="flumotion/components/producers/videotest">
        <filename location="gtk/wizard.py"/>
      </directory>
    </bundle>
    <bundle name="wizard-gtk-videotest">
      <dependency name="base"/>
      <dependency name="glade-videotest"/>
      <directory name="flumotion/components/producers/videotest">
        <filename location="gtk/admin.py"/>
      </directory>
    </bundle>
  </bundles>
</registry>

Notes:

* The bundle name must be unique
* A file can be in only one bundle
* <directory> must have a name attribute, which is the base
  directory where all components are loaded from, it should
  be relative to the python root, eg always start with flumotion/
* i' should not in any ways be tied to python code, eg glade or images can
  also be included

TODO:
  Markers for wizard steps, currently hard coded to gtk/wizard.
  Name of wizard step mapped to a file in a bundle

Sending over a bundle
============================

1. Requests for flumotion/components/producers/videotest/gtk/admin.py

2. "Bundle Manager" sees it's in the bundle admin-gtk-videotest

3. It checks the dependencies; finds out it depends on base.

4. md5sum of base bundle zip is sent over

5. if admin's base bundle is out-of-date, it requests and gets the base bundle
   zip

6. md5sum of admin-gtk-videotest bundle is sent over.

7. zip gets sent over

8. the bundle is unzipped and __path__ is set properly.

9. admin imports the module, end of story

Note: to speed up the process, the answer to the request for a bundle might
send over a dictionary of bundle names and md5sums in the first go.

Creating a bundle
=================

This is only done on request to the manager.
Bundles are not created unless they're needed.

1. On startup, manager hands bundles configuration to bundle manager

2. Bundle manager creates a bundler for each bundle registered.

3. Manager gets request for a bundle's md5sum and hands it to the corresponding
   bundler (bundler.md5sum())

4. This is the first time a bundler actually looks at the files.  It notices
   the bundle is "out of date" since it was never actually created.  It
   creates the zip file in memory, and calculates the md5sum.

5. Bundle manager returns this md5sum

6. Bundle manager gets request for the zip file and calls bundler.zip()

7. Bundle manager returns zip file

Note: bundle manager could keep size statistics and last use statistics for
each bundler, so that we could set an upper limit on the memory use.

Note: we discussed having bundles create __init__.py files automatically on
      either bundling or unbundling.  In practice the rules for doing this
      would a) be very vague (what's the difference between a .py script
      and a .py file part of a package in some other bundle ?) and not
      actually solve a problem since just setting __path__ correctly makes
      imports work as they should.

Requesting bundles
==================

In BaseHeaven: (which does not exist yet)

remote_getBundle(name, filename, pythonName)

(and getBundle in BaseMedium)

getBundle does the dependency checking and fetches all bundles that
the request bundle depends on.


Public API
==========

## Manager side ##
class BaseHeaven:
  # Used from registry
  def addBundle(name, deps, files)
  def getBundleName(filename, pythonName)
  def getBundle(bundleName, filename, pythonName)
     return (bundle, deps) or (None, None)
  def remote_getBundle(name, filename, pythonName)

## Client side ##
class BaseMedium:
  # XXX: public or private?
  def getBundle(name, filename, pythonName)
  def remote_runBundle(bundleName, filename, objectName, *args, **kwargs)
    # to implement, base it on flumotion.worker.worker.remote_runCode
  def runBundle(bundleName, filename, objectName, *args, **kwargs):

   XXX: Perhaps remote_runCode, currently in worker (move to Base) should 
        take an additional filename argument, so tracebacks can contain
        the name of the loaded module
        now we're always been run string segments, but in the future we
        will mostly run files (filename is passed when using execfile
        instead of exec)
	Otherwise we need a way of running a filename instead of a piece of
	code, maybe even deprecate the current method.

    Current definition:
      def remote_runCode(self, codeSegment, objectName, *args, **kwargs):
    Proposed new:
      def remote_runCode(self, filename, objectName, *args, **kwargs):
    Or maybe just make it internal to runBundle

This covers the two use cases:

1. Run a bundle locally
2. Run a bundle remotely (combined with workerCallRemote or
   componentCallRemote)

Running a component
===================

(manager)

1. When all dependencies are started, call WorkerHeaven.startComponent

2. It calls workerAvatar.start(name, type, config)

(worker)

3. In the worker, spawn a new job, fork etc

4. call runBundle on the BaseMedium

5. runBundle requests the bundle and all dependencies

6. it runs the bundle inside the job

Running probe code
==================

1. Name for the bundle is hard coded in the wizard step itself,
   say probe-soundcard and a hard coded entry point

2. WizardStep calls (through Wizard or directly) remote_runBundle, through
   workerCallRemote

Running wizard step
===================

1. take python name (eg, flumotion.component.producer.videotest) and
   add gtk.wizard, run that code with a specific entry code

2. Send it to remote_runBundle

Running admin configuration
===========================

TODO
